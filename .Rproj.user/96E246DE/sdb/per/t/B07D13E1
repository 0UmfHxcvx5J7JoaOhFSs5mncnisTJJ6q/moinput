{
    "collab_server" : "",
    "contents" : "#' readSource\n#' \n#' Read in a source file and convert it to a MAgPIE object. The function is a\n#' wrapper for specific functions designed for the different possible source\n#' types.\n#' \n#' \n#' @param type source type, e.g. \"IEA\". A list of all available source types\n#' can be retrieved with function \\code{\\link{getSources}}.\n#' @param subtype For some sources there are subtypes of the source, for these\n#' source the subtype can be specified with this argument. If a source does not\n#' have subtypes, subtypes should not be set.\n#' @param convert Boolean indicating whether input data conversion\n#' should be done or not. In addition it can be set to \"onlycorrect\" \n#' for sources with a separate correctXXX-function.\n#' @return magpie object with the temporal and data dimensionality of the\n#' source data. Spatial will either agree with the source data or will be on\n#' ISO code country level depending on your choice for the argument \"convert\".\n#' @author Jan Philipp Dietrich, Anastasis Giannousakis, Lavinia Baumstark\n#' @seealso \\code{\\link{setConfig}}, ' \\code{\\link{downloadSource}}, \n#' \\code{\\link{readTau}}\n#' @examples\n#' \n#' \\dontrun{ \n#' a <- readSource(\"Tau\",\"paper\")\n#' }\n#' \n#' @importFrom magclass read.magpie is.magpie\n#' @importFrom methods existsFunction\n#' @export\nreadSource <- function(type,subtype=NULL,convert=TRUE) {\n  cwd <- getwd()\n  setwd(getConfig(\"mainfolder\"))\n  startinfo <- toolstartmessage(\"+\")\n  on.exit(toolendmessage(startinfo,\"-\"))\n  \n  # Does the cache folder exists? (only to be checked if cache is enabled) \n  if(!file.exists(getConfig(\"cachefolder\")) & getConfig(\"enablecache\")) dir.create(getConfig(\"cachefolder\"),recursive = TRUE)\n  \n  # Does the source that should be read exist?\n  if(!(type%in%getSources())) stop('Type \"',type, '\" is not a valid source type. Available sources are: \"',paste(getSources(),collapse='\", \"'),'\"')\n  \n  # Does a correctTYPE function exist?\n  if(convert==\"onlycorrect\" & !(type %in% getSources(\"correct\"))) {\n    warning(\"No correct function for \",type,\" could be found. Set convert to FALSE.\")\n    convert <- FALSE\n  }\n  \n  .getData <- function(type,subtype,prefix=\"read\") {\n    # get data either from cache or by calculating it from source\n    sourcefolder <- paste0(getConfig(\"sourcefolder\"),\"/\",type)\n    if(!file.exists(sourcefolder)) stop('Source folder \"',sourcefolder,'\" for source \"',type,'\" cannot be found! Please set a proper path with  \"setConfig\"!')  \n\n    fname <- paste0(prefix,type,subtype)\n    cachefile <- paste0(getConfig(\"cachefolder\"),\"/\",fname,\".mz\")  \n    \n    .f <- function(type, prefix) {\n      out <- prepFunctionName(type=type, prefix=prefix, error_on_missing=FALSE)\n      if(is.null(out)) return(NULL)\n      return(eval(parse(text=sub(\"\\\\(.*$\",\"\",out))))\n    }\n    \n    .fp <- function(sourcefolder, type) {\n      if(prefix==\"read\") {\n        fp <- fingerprint(sourcefolder, readSource, .f(type,\"read\"))  \n      } else if (prefix==\"correct\") {\n        fp <- fingerprint(sourcefolder, readSource, .f(type,\"read\"), .f(type,\"correct\"))\n      } else if (prefix==\"convert\") {\n        if(!is.null(.f(type,\"correct\"))) {\n          fp <- fingerprint(sourcefolder, readSource, .f(type,\"read\"), .f(type,\"correct\"), .f(type,\"convert\"))\n        } else {\n          fp <- fingerprint(sourcefolder, readSource, .f(type,\"read\"), .f(type,\"convert\"))\n        }\n      }\n      return(fp)\n    }\n    \n    if(getConfig(\"enablecache\") & file.exists(cachefile) &  !(fname %in% getConfig(\"ignorecache\")) & !(type %in% getConfig(\"ignorecache\")) ) { \n      vcat(2,\" - loading data\", cachefile, fill=300)\n      x <- read.magpie(cachefile) \n      fp <- .fp(sourcefolder, type)\n      if(attr(x,\"comment\")[1] == fp | all(getConfig(\"forcecache\")==TRUE) | fname %in% getConfig(\"forcecache\") | type %in% getConfig(\"forcecache\")) {\n        if(attr(x,\"comment\")[1] == fp) {\n          vcat(1,\" - use cache\",cachefile, fill=300)\n        } else {\n          vcat(1,\" - force cache\",cachefile, fill=300)\n        }\n        \n        if(prefix==\"convert\") {\n          iso_country <- read.csv2(system.file(\"extdata\",\"iso_country.csv\",package = \"madrat\"),row.names=NULL)\n          iso_country1<-as.vector(iso_country[,\"x\"])\n          names(iso_country1)<-iso_country[,\"X\"]\n          isocountries <- sort(iso_country1)\n          datacountries <- sort(getRegions(x))\n          if(length(isocountries)!=length(datacountries)) stop(\"Wrong number of countries in \",cachefile,\"!\")\n          if(any(isocountries!=datacountries)) stop(\"Countries in \",cachefile,\" do not agree with iso country list!\")\n        }\n        attr(x,\"id\") <- fname\n        return(x)\n      } else {\n        vcat(2,\" - outdated data in cache (\", cachefile,\"), reload source data\", fill=300)\n      }\n    }\n    \n    if(prefix==\"correct\") {\n      x <- .getData(type,subtype,\"read\")\n      id <-  paste(attr(x,\"id\"),fname,sep=\"|\")\n    } else if(prefix==\"convert\") {\n      if(existsFunction(paste0('correct',type))) {    \n        x <- .getData(type,subtype,\"correct\")\n      } else {\n        x <- .getData(type,subtype,\"read\")\n      }\n      id <- paste(attr(x,\"id\"),fname,sep=\"|\")\n    } else {\n      id <- fname\n    }\n    \n    cwd <- getwd()\n    setwd(sourcefolder)\n    functionname <- prepFunctionName(type=type, prefix=prefix, ignore=ifelse(is.null(subtype),\"subtype\",NA))\n    x <- eval(parse(text=functionname))\n    setwd(cwd)\n    if(!is.magpie(x)) stop(\"Output of function \\\"\",functionname,\"\\\" is not a MAgPIE object!\")\n    if(prefix==\"convert\") {\n      iso_country <- read.csv2(system.file(\"extdata\",\"iso_country.csv\",package = \"madrat\"),row.names=NULL)\n      iso_country1<-as.vector(iso_country[,\"x\"])\n      names(iso_country1)<-iso_country[,\"X\"]\n      isocountries <- sort(iso_country1)\n      datacountries <- sort(getRegions(x))\n      if(length(isocountries)!=length(datacountries)) stop(\"Wrong number of countries returned by \",functionname,\"!\")\n      if(any(isocountries!=datacountries)) stop(\"Countries returned by \",functionname,\" do not agree with iso country list!\")\n    }\n    vcat(2,\" - saving data to\", cachefile, fill=300)\n    write.magpie(x,cachefile,comment = .fp(sourcefolder, type), mode=\"777\") # save data in the cache folder\n    attr(x,\"id\") <- id\n    return(x)\n  }\n  \n  # Check whether source folder exists and try do download source data if it is missing\n  sourcefolder <- paste0(getConfig(\"sourcefolder\"),\"/\",type)\n  if(!file.exists(getConfig(\"sourcefolder\"))) dir.create(getConfig(\"sourcefolder\"), recursive = TRUE)\n  if(!file.exists(sourcefolder)) {\n    # does a routine exist to download the source data?\n    if(type %in% getSources(\"download\")) {\n      downloadSource(type)\n    } else {\n      stop(\"Sourcefolder does not contain data for the requested source \\\"\",type,\"\\\" and there is no download script which could provide the missing data. Please check your settings!\")\n    }\n  }\n  \n        \n  if(convert==TRUE & (type %in% getSources(\"regional\"))) {\n    x <- .getData(type,subtype,\"convert\")\n  } else if (convert==\"onlycorrect\" & (type %in% getSources(\"correct\"))) {\n    x <- .getData(type,subtype,\"correct\")\n  } else {\n    x <- .getData(type,subtype,\"read\")\n  }\n  id <- attr(x,\"id\")\n  on.exit(toolendmessage(startinfo,\"-\",id=id))\n  \n  if(type %in% getSources(\"global\")) {\n    if(nregions(x)>1) stop(\"Data has more than one region, but is supposed to be global data!\")\n    if(getRegions(x)!=\"GLO\") stop(\"Data is supposed to be global data but does have a region name different from GLO!\")\n  }\n  \n  x<-clean_magpie(x)\n  \n  setwd(cwd)\n \n  \n  return(x)\n}    \n    \n",
    "created" : 1510321361713.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "22240298",
    "id" : "B07D13E1",
    "lastKnownWriteTime" : 1508324155,
    "last_content_update" : 1508324155,
    "path" : "~/Documents/work/libraries/madrat/R/readSource.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}