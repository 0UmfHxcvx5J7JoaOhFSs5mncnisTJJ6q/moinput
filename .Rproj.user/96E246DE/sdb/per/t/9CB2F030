{
    "collab_server" : "",
    "contents" : "##' magpie2ggplot2\n#' \n#' Function for plotting MAgPIE objects with ggplot2\n#' \n#' \n#' @usage\n#' magpie2ggplot2(data,scenario=\"default\",ylab=\"Value\",title=\"\",\n#' xaxis=\"Year\",yaxis=\"Value\",facet_x=\"Region\", facet_y=NULL,\n#' geom=\"line\",stack=F,color=\"Scenario\",fill=\"Region\",\n#' shape=NULL,linetype=NULL,alpha=NULL,labs=NULL,stat=NULL,\n#' text_size=12,hline=NULL,legend_position=\"right\",\n#' scales=\"fixed\",ncol=5,xlim=NULL,ylim=NULL,file=NULL,\n#' scale=NULL, breaks_x=waiver(),breaks_y=waiver(),\n#' xaxis_angle=90,xlab=\"Year\",linewidth=1,pointwidth=2,\n#' color_pal=NULL,bar_width=NULL,show_grid=FALSE,\n#' group=\"Region\",axis_text_col=\"black\",zoom=FALSE,\n#' space=\"fixed\",legend_nrow=NULL,legend_ncol=NULL,\n#' facet_style=\"default\",na.rm=FALSE,\n#' stack_share=FALSE,point_position=\"identity\",\n#' normalize=NULL,...)\n#' @param data MAgPIE object or list of MAgPIE objects or dataframe of MAgPIE\n#' object(s); the name of the list entries is used as scenario name in the\n#' legend\n#' @param scenario If the scenario name is stored in the third dimension:\n#' position of the entry in the third dimension that contains the scenario\n#' name. Default: \"default\"\n#' @param ylab y-axis text\n#' @param title title appering at the top of the plot\n#' @param xaxis x-axis of the plot, default: \"Year\"\n#' @param yaxis y-axis of the plot, default: \"Value\"\n#' @param facet_x x-axis facet, default: \"Region\"\n#' @param facet_y y-axis facet, default: NULL\n#' @param geom \"line\",\"point\",\"bar\", or \"area\"\n#' @param stack stacked bar plot (TRUE) or not (FALSE)\n#' @param color Dimension to be colored, default: \"Scenario\"\n#' @param fill Dimension to be filled in stacked plots, default: NULL\n#' @param shape Dimension to be shaped, default: NULL\n#' @param alpha Dimension to be transparent in stacked plots, default: NULL\n#' @param linetype Dimension to differ in linetypes, default: NULL\n#' @param labs vector with legend titles for color,fill,shape,alpha,linetype\n#' @param stat adds statistics (e.g. \"sum\" or \"mean\"), default: NULL\n#' @param text_size text size of axis, legend and title\n#' @param hline NULL or MAgPIE objects. Adds a horizontal line.\n#' @param legend_position right (default), left, top, bottom or none\n#' @param scales fixed (default), free, free_y or free_x; ?facetgrid for\n#' details\n#' @param ncol Number of columns used in facet_wrap function\n#' @param xlim x axis limits; NULL or vector with limits\n#' @param ylim y axis limits; NULL or vector with limits\n#' @param file File name the output should be written to using ggsave\n#' @param scale scaling of ggplot2 object before saving to file\n#' @param breaks_x Vector of x-axis breaks, by default ggplot2 takes the\n#' decision\n#' @param breaks_y Vector of y-axis breaks, by default ggplot2 takes the\n#' decision\n#' @param xaxis_angle Angle of xaxis text in degree, default=90\n#' @param xlab x-axis text\n#' @param linewidth linewidth, default=1\n#' @param pointwidth pointwidth, default=3\n#' @param color_pal vector of colors defining the color palette, if NULL colors\n#' are chosen automaticly\n#' @param bar_width width of bars in geom bar, default value: NULL\n#' @param show_grid show minor and major grid lines; FALSE (default) or TRUE\n#' @param group dimension used for grouping; default value: \"Region\"\n#' @param axis_text_col color of axis text and ticks; default value: \"black\"\n#' @param zoom TRUE zooms the plot according to xlim and ylim, FALSE omits\n#' values not the range of xlim and ylim\n#' @param space fixed (default), free, free_y or free_x; ?facetgrid for details\n#' @param legend_nrow Number of rows used in legend\n#' @param legend_ncol Number of columns used in legend\n#' @param facet_style style of facets, default or paper\n#' @param na.rm Boolean deciding whether NA values should be filtered out of\n#' the data or not.\n#' @param stack_share stacked bar plot showing shares (TRUE) or absolut values\n#' (FALSE)\n#' @param point_position position of points; \"identity\" or position_dodge(width\n#' = 1)\n#' @param normalize NULL (default) or year which should be used to normalize\n#' the data\n#' @param ... Further options passed to as.ggplot\n#' @return ggplot2 object representing one or more MAgPIE objects.\n#' @author Florian Humpenoeder, David Klein\n#' @seealso \\code{\\link{scratch_plot},\\link{histoplot},}\n#' @examples\n#' \n#' \\dontrun{\n#' crop_area_reg <- list()\n#' crop_area_reg[[\"scenario_name\"]] <- croparea(\"fulldata.gdx\")\n#' magpie2ggplot2(crop_area_reg,ylab=\"10^6 ha\",title=\"Croparea\",stack=T,facet_x=\"Scenario\",color=NULL)}\n#' \\dontrun{\n#' prices <- list()\n#' prices[[\"Scenario1\"]] <- prices(\"Scenario1.gdx\",crops=c(\"tece\",\"maiz\"))\n#' prices[[\"Scenario2\"]] <- prices(\"Scenario2.gdx\",crops=c(\"tece\",\"maiz\"))\n#' magpie2ggplot2(prices,ylab=\"US$/ton DM\",title=\"Agricultural prices\")}\n#' @export\n#' @importFrom magclass is.magpie setYears\n#' @importFrom RColorBrewer brewer.pal\n#' @importFrom grDevices colorRampPalette\n#' @importFrom ggplot2 ggplot scale_y_discrete aes_string facet_grid facet_wrap geom_bar scale_fill_manual geom_area geom_line \n#' geom_point scale_color_manual geom_hline aes_ stat_summary ggtitle theme element_rect element_line element_text scale_alpha_discrete \n#' element_blank coord_cartesian scale_x_date scale_x_continuous scale_x_discrete scale_y_date scale_y_continuous guides guide_legend ggsave \n#' @importFrom mip plotstyle\n\nmagpie2ggplot2 <- function(data,scenario=\"default\",ylab=\"Value\",title=\"\",xaxis=\"Year\",yaxis=\"Value\",facet_x=\"Region\",facet_y=NULL,\n                           geom=\"line\",stack=F,color=\"Scenario\",fill=\"Region\",shape=NULL,linetype=NULL,alpha=NULL,labs=NULL,stat=NULL,\n                           text_size=12,hline=NULL,legend_position=\"right\",scales=\"fixed\",ncol=5,xlim=NULL,ylim=NULL,file=NULL,scale=NULL,\n                           breaks_x=waiver(),breaks_y=waiver(),xaxis_angle=90,xlab=\"Year\",linewidth=1,pointwidth=2,color_pal=NULL,bar_width=NULL,\n                           show_grid=FALSE,group=\"Region\",axis_text_col=\"black\",zoom=FALSE,space=\"fixed\",legend_nrow=NULL,legend_ncol=NULL,\n                           facet_style=\"default\",na.rm=FALSE,stack_share=FALSE,point_position=\"identity\",normalize=NULL,...){\n  .interact <- function(x) {\n    if(length(x)>1) {\n      return(paste0(\"interaction(\",paste(x,collapse=\", \"),\")\"))\n    } else {\n      return(x)\n    }\n  }\n  \n  group   <- .interact(group)\n  facet_x <- .interact(facet_x)\n  facet_y <- .interact(facet_y)\n  color   <- .interact(color)\n  fill    <- .interact(fill)\n  shape   <- .interact(shape)\n  \n  .e <- environment()\n  #require(\"ggplot2\", quietly = TRUE)\n  #require(\"RColorBrewer\", quietly = TRUE)\n  #  assign(\"set1\",set1,envir=.e)\n  number_ticks <- function(n) {function(limits) pretty(limits, n)}\n  if(!is.null(normalize)) {\n    if(is.magpie(data)) {\n      data <- data - setYears(data[,normalize,],NULL)\n    } else stop(\"Normalization works only for MAgPIE objects. Sorry...\")\n  }\n  if (!is.data.frame(data)) data <- as.ggplot(data,scenario=scenario,...)\n  if(na.rm) data <- na.omit(data)\n  \n  #set colors\n  if(is.null(color_pal)) {\n    set1 <- colorRampPalette(brewer.pal(9,\"Set1\"))  \n    if(!is.null(fill)) {\n      scale_fill <- as.character(plotstyle(as.character(unique(data[[fill]])),out=\"color\"))\n      if(fill != \"Region\") levels(data[[fill]]) <- plotstyle(as.character(unique(data[[fill]])),out=\"legend\")\n    }\n    if(!is.null(color)) {\n      scale_color <- as.character(plotstyle(as.character(unique(data[[color]])),out=\"color\"))\n      if(color != \"Region\") levels(data[[color]]) <- plotstyle(as.character(unique(data[[color]])),out=\"legend\")\n    }\n#    if(!is.null(fill)) scale_fill <- plotstyle(as.character(unique(data[[fill]]))) #set1(length(unique(data[[fill]]))) #\n#    if(!is.null(color)) scale_color <- plotstyle(as.character(unique(data[[color]]))) #set1(length(unique(data[[color]]))) #\n  } else {\n    scale_fill <- color_pal\n    scale_color <- color_pal\n  }\n  \n  #positive and negative values\n  data_pos <- data\n  data_neg <- data\n  data_pos$Value[data_pos$Value<0] <- 0\n  data_neg$Value[data_neg$Value>=0] <- 0\n  \n  #plotting\n  p <- ggplot(data, aes_string(x=xaxis, y=yaxis), environment=.e)\n  if (!is.null(facet_y)) {\n    if(is.null(facet_x)) facet_x <- \".\"\n    p <- p + facet_grid(as.formula(paste(facet_y, \"~\", facet_x)), scales=scales, space=space)\n  } else if (!is.null(facet_x)) p <- p + facet_wrap(as.formula(paste(\"~\", facet_x)), scales=scales, ncol=ncol)\n  if (geom == \"bar\") {\n    if (stack) {\n      if (stack_share) {\n        if (any(data_pos$Value >= 0,na.rm=TRUE)) p <- p + geom_bar(data=data_pos,position='fill',stat='identity',aes_string(fill=fill,alpha=alpha,width=bar_width))\n        if (any(data_neg$Value < 0,na.rm=TRUE)) p <- p + geom_bar(data=data_neg,position='fill',stat='identity',aes_string(fill=fill,alpha=alpha,width=bar_width))\n      } else {\n        if (any(data_pos$Value >= 0,na.rm=TRUE)) p <- p + geom_bar(data=data_pos,position='stack',stat='identity',aes_string(fill=fill,group=group,alpha=alpha,width=bar_width))\n        if (any(data_neg$Value < 0,na.rm=TRUE)) p <- p + geom_bar(data=data_neg,position='stack',stat='identity',aes_string(fill=fill,group=group,alpha=alpha,width=bar_width))        \n      }\n    } else p <- p + geom_bar(data=data,position='dodge',stat='identity',aes_string(fill=fill,group=group,alpha=alpha,width=bar_width))\n    p <- p + scale_fill_manual(values=scale_fill)\n    # if (!is.null(fill)) {\n    #   if ((fill == \"Region\") & (is.null(color_pal))) {\n    #     if (length(unique(data$Region)) == 1) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[11])\n    #     } else if (length(unique(data$Region)) == 10) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:10])\n    #     } else if (length(unique(data$Region)) == 11) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:11])\n    #     } else p <- p + scale_fill_manual(values=scale_fill)\n    #   } else if (identical(levels(data$Data1),c(\"crop\", \"past\", \"forestry\", \"forest\", \"urban\", \"other\"))) {\n    #     p <- p + scale_fill_manual(values=c(\"chocolate4\", \"#E6AB02\", \"darkgreen\", \"#66A61E\", \"black\", \"brown3\", \"honeydew4\"))\n    #   } else p <- p + scale_fill_manual(values=scale_fill)\n    # }\n  } else if (geom == \"area\") {\n    if (stack) {\n      if (stack_share) {\n        if (any(data_pos$Value >= 0,na.rm=TRUE)) p <- p + geom_area(data=data_pos,position='fill',stat='identity',aes_string(fill=fill, alpha=alpha))\n        if (any(data_neg$Value < 0,na.rm=TRUE)) p <- p + geom_area(data=data_neg,position='fill',stat='identity',aes_string(fill=fill, alpha=alpha))\n      } else {\n        if (any(data_pos$Value >= 0,na.rm=TRUE)) p <- p + geom_area(data=data_pos,position='stack',stat='identity',aes_string(fill=fill, alpha=alpha))\n        if (any(data_neg$Value < 0,na.rm=TRUE)) p <- p + geom_area(data=data_neg,position='stack',stat='identity',aes_string(fill=fill, alpha=alpha))\n      }\n      \n    } else p <- p + geom_area(data=data,position='dodge',stat='identity',aes_string(fill=fill, alpha=alpha))\n    p <- p + scale_fill_manual(values=scale_fill)\n    # if (!is.null(fill)) {\n    #   if ((fill == \"Region\") & (is.null(color_pal))) {\n    #     if (length(unique(data$Region)) == 1) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[11])\n    #     } else if (length(unique(data$Region)) == 10) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:10])\n    #     } else if (length(unique(data$Region)) == 11) {\n    #       p <- p + scale_fill_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:11])\n    #     } else p <- p + scale_fill_manual(values=scale_fill)\n    #   } else if (identical(levels(data$Data1),c(\"crop\", \"past\", \"forestry\", \"forest\", \"urban\", \"other\"))) {\n    #     p <- p + scale_fill_manual(values=c(\"chocolate4\", \"#E6AB02\", \"darkgreen\", \"#66A61E\", \"black\", \"brown3\", \"honeydew4\"))\n    #   } else p <- p + scale_fill_manual(values=scale_fill)\n    # }\n  } else if (geom == \"line\") {\n    p <- p + geom_line(size=linewidth,aes_string(group=group,color=color,shape=shape,linetype=linetype)) + geom_point(size=pointwidth,aes_string(group=group,color=color,shape=shape))\n    p <- p + scale_color_manual(values=scale_color)\n    # if (!is.null(color)) {\n    #   if ((color==\"Region\") & (is.null(color_pal))) {\n    #     if ((is.null(color_pal)) & (length(unique(data$Region)) == 1) ) p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[11])\n    #     else if (length(unique(data$Region)) == 5)  p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[c(9,5,1,8,2)])\n    #     else if (length(unique(data$Region)) == 6)  p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[c(9,5,1,8,2,11)])\n    #     else if (length(unique(data$Region)) == 10) p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:10])\n    #     else if (length(unique(data$Region)) == 11) p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:11])      \n    #   } else p <- p + scale_color_manual(values=scale_color)\n    # }\n  } else if (geom == \"point\") {\n    p <- p + geom_point(size=pointwidth,aes_string(group=group,color=color,shape=shape,alpha=alpha),position=point_position)\n    p <- p + scale_color_manual(values=scale_color)\n    # if (!is.null(color)) {\n    #   if ((color==\"Region\") & (is.null(color_pal))) {\n    #     if (length(unique(data$Region)) == 1)        p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[11])\n    #     else if (length(unique(data$Region)) == 10)  p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:10])\n    #     else if (length(unique(data$Region)) == 11)  p <- p + scale_color_manual(values=nice_colors(style=\"contrast_area\",saturation=1)[1:11])      \n    #   } else p <- p + scale_color_manual(values=scale_color)\n    # }\n  }\n  if (!is.null(hline)) {\n    hline <- as.ggplot(hline,...)\n    p <- p + geom_hline(data=hline,aes_(yintercept=~Value))\n  }\n  if (!is.null(stat)) p <- p + stat_summary(fun.y=stat, color=\"black\", geom=\"point\", size = 2) + stat_summary(fun.y=stat, color=\"black\", geom=\"line\", size = 1)\n  if (!is.null(labs)) p  <- p + labs(color=labs[1],fill=labs[2],shape=labs[3],alpha=labs[4],linetype=labs[5])\n  if (xaxis_angle == 90) hjust <- 1 else hjust <- 0.5\n  #  p  <- p + labs(y=ylab,x=xlab) + ggtitle(title) + theme(panel.background = element_rect(fill=\"white\", colour=\"black\"),panel.grid.minor=element_line(colour=\"white\"),plot.title=element_text(size=text_size+4,face=\"bold\",vjust=1.5), legend.position=legend_position, legend.title=element_text(size=text_size,face=\"bold\"), legend.text=element_text(size=text_size), axis.title.y=element_text(angle=90,size=text_size,face=\"bold\",vjust=1), axis.text.y=element_text(size=text_size), axis.title.x=element_text(size=text_size,face=\"bold\",vjust=-0.3), axis.text.x=element_text(size=text_size, angle=xaxis_angle, vjust=0.5,hjust=hjust)) + scale_alpha_discrete(range=c(0.5, 1))\n  #  p <- p + theme(axis.title.y=element_text(margin=margin(0,20,0,0)))#, axis.text.y=element_text(size=text_size), axis.title.x=element_text(size=text_size,face=\"bold\"), axis.text.x=element_text(size=text_size, angle=xaxis_angle)) + scale_alpha_discrete(range=c(0.5, 1))\n  p  <- p + labs(y=ylab,x=xlab) + ggtitle(title) + theme(panel.background = element_rect(fill=\"white\", colour=\"black\"),panel.grid.minor=element_line(colour=\"white\"),legend.position=legend_position,text=element_text(size=text_size),axis.text.x=element_text(size=text_size, angle=xaxis_angle)) + scale_alpha_discrete(range=c(0.5, 1))\n  if (facet_style == \"default\") p <- p\n  else if (facet_style == \"paper\") p <- p + theme(strip.background = element_blank())\n  if(show_grid) p <- p + theme(panel.grid.major=element_line(colour=\"grey80\"),panel.grid.minor=element_line(colour=\"grey90\"))\n  labels <- waiver()\n  \n  if (!zoom & stack & !is.null(ylim) & yaxis==\"Value\") stop(\"Limiting y axis in stacked plots works only with zoom = TRUE\")\n  if (!zoom & stack & !is.null(xlim) & xaxis==\"Value\") stop(\"Limiting x axis in stacked plots works only with zoom = TRUE\")\n  \n  if (zoom) {\n    if (xaxis==\"Value\") {\n      xlim2 <- xlim\n      if (!is.null(xlim) & xaxis == \"Year\" & !is.factor(data[,xaxis])) xlim2 <- as.Date(paste(xlim2,\"-01-01\",sep=\"\"))\n      if (is.factor(data[,xaxis])) xlim2 <- NULL else xlim <- NULL\n      p <- p + coord_cartesian(xlim=xlim2)      \n    } else if (yaxis==\"Value\") {\n      ylim2 <- ylim\n      if (!is.null(ylim) & yaxis == \"Year\" & !is.factor(data[,yaxis])) ylim2 <- as.Date(paste(ylim2,\"-01-01\",sep=\"\"))\n      if (is.factor(data[,yaxis])) ylim2 <- NULL else ylim <- NULL\n      p <- p + coord_cartesian(ylim=ylim2)\n    }\n  }\n  \n  #xaxis\n  if (xaxis == \"Year\" & !is.factor(data[,xaxis]) & !is.numeric(data[,xaxis])) {\n    if (!is.null(xlim)) xlim <- as.Date(paste(xlim,\"-01-01\",sep=\"\"))\n    if (!is.list(breaks_x)) {\n      labels <- format(as.Date(paste(breaks_x,\"-01-01\",sep=\"\")), format = \"%Y\")    \n      breaks_x <- as.Date(paste(breaks_x,\"-01-01\",sep=\"\"))\n    }\n    p <- p + scale_x_date(limits=xlim,breaks=breaks_x,labels=labels)  \n  } else if (is.numeric(data[,xaxis])) {\n    p <- p + scale_x_continuous(limits=xlim,breaks=breaks_x)\n  } else p <- p + scale_x_discrete(limits=xlim,breaks=breaks_x)\n  \n  #yaxis\n  if (yaxis == \"Year\" & !is.factor(data[,yaxis]) & !is.numeric(data[,yaxis])) {\n    if (!is.null(ylim)) ylim <- as.Date(paste(ylim,\"-01-01\",sep=\"\"))\n    if (!is.list(breaks_y)) {\n      labels <- format(as.Date(paste(breaks_y,\"-01-01\",sep=\"\")), format = \"%Y\")    \n      breaks_y <- as.Date(paste(breaks_y,\"-01-01\",sep=\"\"))\n    }\n    p <- p + scale_y_date(limits=ylim,breaks=breaks_y,labels=labels)  \n  } else if (is.numeric(data[,yaxis])) {\n    p <- p + scale_y_continuous(limits=ylim,breaks=breaks_y)\n  } else p <- p + scale_y_discrete(limits=ylim,breaks=breaks_y)\n  \n  if (!is.null(axis_text_col)) p <- p + theme(axis.text = element_text(colour=axis_text_col),axis.ticks = element_line(colour=axis_text_col))\n  # reverse_switch has to be predefined so everything can be set in one step below, because consecutive use of guide_legend would overwrite previous setting\n if (geom==\"bar\" & stack & all(data_neg$Value == 0,na.rm=TRUE)) reverse_switch=TRUE else reverse_switch=FALSE \n  p <- p + guides(color = guide_legend(nrow=legend_nrow,ncol=legend_ncol,title.position = \"top\", byrow = TRUE)) +\n           guides(fill  = guide_legend(nrow=legend_nrow,ncol=legend_ncol,title.position = \"top\", byrow = TRUE,reverse=reverse_switch)) +\n           guides(shape = guide_legend(nrow=legend_nrow,ncol=legend_ncol,title.position = \"top\", byrow = TRUE)) +\n           guides(alpha = guide_legend(nrow=legend_nrow,ncol=legend_ncol,title.position = \"top\", byrow = TRUE)) +\n           guides(linetype = guide_legend(nrow=legend_nrow,ncol=legend_ncol,title.position = \"top\", byrow = TRUE)) +\n           theme(legend.box.just = \"left\")\n  if(!is.null(file)) {\n    ggsave(file,p,scale=scale)\n  } else {\n    return(p)  \n  }\n}\n",
    "created" : 1508610446094.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2294694187",
    "id" : "9CB2F030",
    "lastKnownWriteTime" : 1493410069,
    "last_content_update" : 1493410069,
    "path" : "~/Documents/work/libraries/luplot/R/magpie2ggplot2.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}